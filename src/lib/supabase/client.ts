import { createBrowserClient } from "@supabase/ssr";
import { createClient } from "@supabase/supabase-js";

// Database type definitions (will be generated by Supabase CLI)
export interface Database {
  public: {
    Tables: {
      user_profiles: {
        Row: {
          id: string;
          display_name: string;
          avatar_url: string | null;
          default_rest_timer: number;
          notification_preferences: {
            rest_timer: boolean;
            workout_reminders: boolean;
            achievements: boolean;
          };
          privacy_settings: {
            profile_visibility: "public" | "private";
            workout_sharing: boolean;
          };
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id: string;
          display_name: string;
          avatar_url?: string | null;
          default_rest_timer?: number;
          notification_preferences?: {
            rest_timer: boolean;
            workout_reminders: boolean;
            achievements: boolean;
          };
          privacy_settings?: {
            profile_visibility: "public" | "private";
            workout_sharing: boolean;
          };
        };
        Update: {
          display_name?: string;
          avatar_url?: string | null;
          default_rest_timer?: number;
          notification_preferences?: {
            rest_timer: boolean;
            workout_reminders: boolean;
            achievements: boolean;
          };
          privacy_settings?: {
            profile_visibility: "public" | "private";
            workout_sharing: boolean;
          };
        };
      };
      movement_templates: {
        Row: {
          id: string;
          name: string;
          muscle_group: string;
          tracking_type:
            | "weight"
            | "bodyweight"
            | "duration"
            | "distance"
            | "reps_only";
          experience_level: "Beginner" | "Intermediate" | "Advanced";
          instructions: string | null;
          tags: string[];
          created_at: string;
          updated_at: string;
        };
        Insert: {
          name: string;
          muscle_group: string;
          tracking_type:
            | "weight"
            | "bodyweight"
            | "duration"
            | "distance"
            | "reps_only";
          experience_level: "Beginner" | "Intermediate" | "Advanced";
          instructions?: string | null;
          tags?: string[];
        };
        Update: {
          name?: string;
          muscle_group?: string;
          tracking_type?:
            | "weight"
            | "bodyweight"
            | "duration"
            | "distance"
            | "reps_only";
          experience_level?: "Beginner" | "Intermediate" | "Advanced";
          instructions?: string | null;
          tags?: string[];
        };
      };
      user_movements: {
        Row: {
          id: string;
          user_id: string;
          template_id: string | null;
          name: string;
          muscle_group: string;
          tracking_type:
            | "weight"
            | "bodyweight"
            | "duration"
            | "distance"
            | "reps_only";
          personal_notes: string | null;
          manual_1rm: number | null;
          custom_rest_timer: number | null;
          usage_count: number;
          last_used_at: string | null;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          user_id: string;
          template_id?: string | null;
          name: string;
          muscle_group: string;
          tracking_type:
            | "weight"
            | "bodyweight"
            | "duration"
            | "distance"
            | "reps_only";
          personal_notes?: string | null;
          manual_1rm?: number | null;
          custom_rest_timer?: number | null;
          usage_count?: number;
          last_used_at?: string | null;
        };
        Update: {
          name?: string;
          muscle_group?: string;
          tracking_type?:
            | "weight"
            | "bodyweight"
            | "duration"
            | "distance"
            | "reps_only";
          personal_notes?: string | null;
          manual_1rm?: number | null;
          custom_rest_timer?: number | null;
          usage_count?: number;
          last_used_at?: string | null;
        };
      };
      workouts: {
        Row: {
          id: string;
          user_id: string;
          name: string;
          description: string | null;
          default_rest_timer: number | null;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          user_id: string;
          name: string;
          description?: string | null;
          default_rest_timer?: number | null;
        };
        Update: {
          name?: string;
          description?: string | null;
          default_rest_timer?: number | null;
        };
      };
      workout_movements: {
        Row: {
          id: string;
          workout_id: string;
          user_movement_id: string;
          order_index: number;
          created_at: string;
        };
        Insert: {
          workout_id: string;
          user_movement_id: string;
          order_index: number;
        };
        Update: {
          order_index?: number;
        };
      };
      sets: {
        Row: {
          id: string;
          user_id: string;
          user_movement_id: string;
          workout_id: string | null;
          set_type: "warmup" | "working" | "drop" | "failure" | "rest_pause";
          reps: number | null;
          weight: number | null;
          duration: number | null;
          distance: number | null;
          rpe: number | null;
          notes: string | null;
          created_at: string;
        };
        Insert: {
          user_id: string;
          user_movement_id: string;
          workout_id?: string | null;
          set_type?: "warmup" | "working" | "drop" | "failure" | "rest_pause";
          reps?: number | null;
          weight?: number | null;
          duration?: number | null;
          distance?: number | null;
          rpe?: number | null;
          notes?: string | null;
        };
        Update: {
          set_type?: "warmup" | "working" | "drop" | "failure" | "rest_pause";
          reps?: number | null;
          weight?: number | null;
          duration?: number | null;
          distance?: number | null;
          rpe?: number | null;
          notes?: string | null;
        };
      };
      workout_sessions: {
        Row: {
          id: string;
          user_id: string;
          workout_id: string;
          started_at: string;
          completed_at: string | null;
          notes: string | null;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          user_id: string;
          workout_id: string;
          started_at: string;
          completed_at?: string | null;
          notes?: string | null;
        };
        Update: {
          completed_at?: string | null;
          notes?: string | null;
        };
      };
      personal_records: {
        Row: {
          id: string;
          user_id: string;
          user_movement_id: string;
          record_type:
            | "max_weight"
            | "max_reps"
            | "max_duration"
            | "max_volume";
          value: number;
          set_id: string;
          achieved_at: string;
          created_at: string;
        };
        Insert: {
          user_id: string;
          user_movement_id: string;
          record_type:
            | "max_weight"
            | "max_reps"
            | "max_duration"
            | "max_volume";
          value: number;
          set_id: string;
          achieved_at: string;
        };
        Update: {
          value?: number;
          achieved_at?: string;
        };
      };
      sync_operations: {
        Row: {
          id: string;
          user_id: string;
          operation: "INSERT" | "UPDATE" | "DELETE";
          table_name: string;
          record_id: string;
          data: Record<string, unknown>;
          timestamp: string;
          retry_count: number;
          error: string | null;
          created_at: string;
        };
        Insert: {
          user_id: string;
          operation: "INSERT" | "UPDATE" | "DELETE";
          table_name: string;
          record_id: string;
          data: Record<string, unknown>;
          timestamp: string;
          retry_count?: number;
          error?: string | null;
        };
        Update: {
          retry_count?: number;
          error?: string | null;
        };
      };
      analytics_events: {
        Row: {
          id: string;
          user_id: string;
          event_type: string;
          event_data: Record<string, unknown>;
          created_at: string;
        };
        Insert: {
          user_id: string;
          event_type: string;
          event_data: Record<string, unknown>;
        };
        Update: {
          [_ in never]: never;
        };
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      tracking_type:
        | "weight"
        | "bodyweight"
        | "duration"
        | "distance"
        | "reps_only";
      set_type: "warmup" | "working" | "drop" | "failure" | "rest_pause";
      experience_level: "Beginner" | "Intermediate" | "Advanced";
      record_type: "max_weight" | "max_reps" | "max_duration" | "max_volume";
      operation_type: "INSERT" | "UPDATE" | "DELETE";
    };
  };
}

// Environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || "";
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || "";

// Build-time check - this will show if env vars are missing during build
if (!supabaseUrl || !supabaseAnonKey) {
  console.error("Missing Supabase environment variables at build time:", {
    hasUrl: !!supabaseUrl,
    hasKey: !!supabaseAnonKey,
    urlLength: supabaseUrl.length,
    keyLength: supabaseAnonKey.length,
  });
}

// Client-side Supabase client (will be null if env vars are missing)
export const supabaseClient =
  supabaseUrl && supabaseAnonKey
    ? createClient<Database>(supabaseUrl, supabaseAnonKey, {
        auth: {
          persistSession: true,
          autoRefreshToken: true,
          detectSessionInUrl: true,
          flowType: "pkce",
        },
        realtime: {
          params: {
            eventsPerSecond: 10,
          },
        },
        global: {
          headers: {
            "X-Client-Info": "fitness-tracking-app@1.0.0",
          },
        },
      })
    : null;

// Server-side client for Netlify Functions
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY || "";
export const supabaseServerClient =
  supabaseUrl && serviceRoleKey
    ? createClient<Database>(supabaseUrl, serviceRoleKey, {
        auth: {
          autoRefreshToken: false,
          persistSession: false,
        },
      })
    : null;

// Server component client is now in ./server.ts

// Client component client (for App Router)
export function createSupabaseBrowserClient() {
  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error("Missing Supabase environment variables");
  }
  return createBrowserClient<Database>(supabaseUrl, supabaseAnonKey);
}

// Helper function to check if we're on the client side
export const isClient = typeof window !== "undefined";
