'use client';

// import { useSyncStatus } from '@/hooks/useSyncStatus'; // Temporarily disabled
import React, { createContext, useContext } from 'react';

interface SyncStatus {
  isOnline: boolean;
  supabaseConnected: boolean;
  lastSyncTime: string | null;
  pendingOperations: number;
}

interface SyncContextType {
  syncStatus: SyncStatus;
  refreshStatus: () => Promise<void>;
  triggerManualSync: () => Promise<{ success: boolean; message: string }>;
  clearFailedOperations: () => Promise<void>;
  retryFailedOperations: () => Promise<void>;
}

const SyncContext = createContext<SyncContextType | undefined>(undefined);

export function SyncStatusProvider({ children }: { children: React.ReactNode }) {
  const syncData = useSyncStatus();

  return (
    <SyncContext.Provider value={syncData}>
      {children}
    </SyncContext.Provider>
  );
}

export function useSyncContext() {
  const context = useContext(SyncContext);
  if (context === undefined) {
    throw new Error('useSyncContext must be used within a SyncStatusProvider');
  }
  return context;
}
